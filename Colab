# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Ridge
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
import lightgbm as lgb

# Load dataset
data = pd.read_csv('house_prices.csv')  # Replace with your dataset path

# Separate features and target
X = data.drop('SalePrice', axis=1)
y = data['SalePrice']

# Identify numerical and categorical columns
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_cols = X.select_dtypes(include=['object']).columns.tolist()

# Preprocessing for numerical and categorical data
numerical_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

categorical_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer([
    ('num', numerical_pipeline, numerical_cols),
    ('cat', categorical_pipeline, categorical_cols)
])

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define models
ridge = Ridge(alpha=1.0)
rf = RandomForestRegressor(n_estimators=100, random_state=42)
xgboost_model = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
lightgbm_model = lgb.LGBMRegressor(n_estimators=100, learning_rate=0.1, random_state=42)

# Build pipelines
models = {
    'Ridge Regression': Pipeline([('preprocessor', preprocessor), ('regressor', ridge)]),
    'Random Forest': Pipeline([('preprocessor', preprocessor), ('regressor', rf)]),
    'XGBoost': Pipeline([('preprocessor', preprocessor), ('regressor', xgboost_model)]),
    'LightGBM': Pipeline([('preprocessor', preprocessor), ('regressor', lightgbm_model)])
}

# Train and evaluate models
for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, preds))
    print(f"{name} RMSE: {rmse:.2f}")

# Optional: Hyperparameter tuning example for XGBoost
param_grid = {
    'regressor__n_estimators': [100, 200],
    'regressor__max_depth': [3, 5, 7],
    'regressor__learning_rate': [0.05, 0.1]
}

grid_search = GridSearchCV(models['XGBoost'], param_grid, cv=3, scoring='neg_mean_squared_error')
grid_search.fit(X_train, y_train)

print("Best XGBoost params:", grid_search.best_params_)
best_model = grid_search.best_estimator_

# Final evaluation
final_preds = best_model.predict(X_test)
final_rmse = np.sqrt(mean_squared_error(y_test, final_preds))
print(f"Final XGBoost RMSE after tuning: {final_rmse:.2f}")
